const mesureWidth = item => {
  let reqItemWidth = 0;

  const screenWidth = $(window).width();
  const container = item.closest(".recipes");
  const titlesBlocks = container.find(".recipes__title");
  const titlesWidth = titlesBlocks.width() * titlesBlocks.length;

  const textContainer = item.find(".recipes__container");
  const paddingLeft = parseInt(textContainer.css("padding-left"));
  const paddingRight = parseInt(textContainer.css("padding-right"));

  const isMobile = window.matchMedia("(max-width: 768px)").matches;

  if (isMobile) {
    reqItemWidth = screenWidth - titlesWidth;
  } else {
    reqItemWidth = 500;
  }

  return {
    container: reqItemWidth,
    textContainer: reqItemWidth - paddingLeft - paddingRight
  }
};

const closeEveryItemInContainer = (container) => {
  const items = container.find(".recipes__item");
  const content = container.find(".recipes__description");

  items.removeClass("active"); 
  content.width(0);
};

const openItemAccord = (item) => {
  const hiddenContent = item.find(".recipes__description");
  const reqWidth = mesureWidth(item);
  const textBlock = item.find(".recipes__container");

  item.addClass("active");
  hiddenContent.width(reqWidth.container);
  textBlock.width(reqWidth.textContainer);
};

$(".recipes__title").on("click", (e) => {
   e.preventDefault();

   const $this = $(e.currentTarget);
   const item = $this.closest(".recipes__item");
   const itemOpened = item.hasClass("active");
   const container = $this.closest(".recipes");

   if (itemOpened) {
    closeEveryItemInContainer(container)
  } else {
    closeEveryItemInContainer(container)
    openItemAccord(item);
   }

});

$(".recipes__close").on("click", e => {
  e.preventDefault();

  closeEveryItemInContainer($('.recipes'));
});
const openItem = item => {
  const container = item.closest(".team__member");
  const contentBlock = container.find(".member__content");
  const textBlock = contentBlock.find(".member__content-block");
  const reqHeight = textBlock.height();
  
  container.addClass("active")
  contentBlock.height(reqHeight);
}

const closeEveryItem = container => {
  const items = container.find('.member__content');
  const itemContainer = container.find(".team__member");

  itemContainer.removeClass("active");
  items.height(0);
}

$('.member__name').click(e => {
  const $this = $(e.currentTarget);
  const container = $this.closest('.team');
  const elemContainer = $this.closest(".team__member");

  if (elemContainer.hasClass("active")) {
    closeEveryItem(container);
  } else {
    closeEveryItem(container);
    openItem($this);
  }

})



// $(document).ready(() => {
//   $('.member__name').on('click', function(e) {
//     let member = $(e.currentTarget).next();
//     $(this).toggleClass('member__function--active');
//     member.slideToggle();
//   })
// });
const htmlElem = $("html");
if ($(window).width() < 400) {
  htmlElem.css("font-size", "3.7vmin");
}
$(window).resize(function(){
  if ($(window).width() < 400) {
    htmlElem.css("font-size", "3.7vmin");
  } else {
    htmlElem.css("font-size", "");
  }
});
let myMap;

const init = () => {
  myMap = new ymaps.Map("map", {
    center: [55.753969, 37.606673],
    zoom: 14,
    controls: []
  });

  const coords =  [
    [55.763183, 37.582547],
    [55.741035, 37.573998],
    [55.746456, 37.608084],
    [55.761756, 37.618330]
  ];

  const myCollection = new ymaps.GeoObjectCollection({}, {
    draggable: false,
    iconLayout: 'default#image',
    iconImageHref: "./img/marker.svg",
    iconImageSize: [46, 57],
    iconImageOffset: [-35, -52]
  });

  coords.forEach(coord => {
    myCollection.add(new ymaps.Placemark(coord));
  });

  myMap.geoObjects.add(myCollection);

  myMap.behaviors.disable('scrollZoom');
}

ymaps.ready(init); 
const menu = document.querySelector(".menu");
const hamburger = document.querySelector(".hamburger");

hamburger.addEventListener("click", e => {
  e.preventDefault();

  menu.classList.add("menu--mobile");
  hamburger.classList.add("hamburger--close");

  hamburger.addEventListener("click", i => {
    menu.classList.toggle("menu--mobile");
    hamburger.classList.toggle("hamburger--close");
  })

})


// const menu = document.querySelector(".menu");
// const hamburger = document.querySelector(".hamburger");

// hamburger.addEventListener("click", e => {
//   e.preventDefault();
//   menu.classList.add("menu--mobile");

//   const closeElement = document.createElement("div");
//   closeElement.classList.add("close");
//   closeElement.innerHTML = "x";

//   closeElement.addEventListener("click", e => {
//     menu.classList.remove("menu--mobile");
//     menu.removeChild(closeElement);
//   })

//   menu.appendChild(closeElement);
// })
const validateFields = (form, fieldsArray) => {
  fieldsArray.forEach(field => {
    field.removeClass("input-eror");
    if (field.val().trim() === "") {
      field.addClass("input-eror"); 
    }
  });

  const errorFields = form.find(".input-eror");

  return errorFields.length === 0;
}

$('.form').submit(e => {
  e.preventDefault();

  const form = $(e.currentTarget);
  const name = form.find("[name='name']");
  const phone = form.find("[name='phone']");
  const comment = form.find("[name='comment']");
  const to = form.find("[name='to']");

  const modal = $("#modal");
  const content = modal.find(".modal__content");

  modal.removeClass("error-modal");

  const isValid = validateFields(form, [name, phone, comment, to]);

  if (isValid) {
    const request = $.ajax({
      url: "https://webdev-api.loftschool.com/sendmail",
      method: "post",
      data: {
      name: name.val(),
      phone: phone.val(),
      comment: comment.val(),
      to: to.val(),
      }
    });

    request.done(data => {
      content.text(data.message);
    });

    request.fail( data => {
      const message = data.responseJSON.message;
      content.text(message);
      modal.addClass("error-modal");
    });

    request.always(() => {
      $.fancybox.open({
        src  : '#modal',
        type : 'inline'
        });     
    })
  }
});

$('.app-close-modal').click(e => {
  e.preventDefault();

  $.fancybox.close();
})
const sections = $("section");
const display = $(".maincontent");
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");

const mobileDetect = new MobileDetect(window.navigator.userAgent);
const isMobile = mobileDetect.mobile();

let inScroll = false;

sections.first().addClass("active");

const countSectionPosition = (sectionEq) => {
  const position = sectionEq * -100;

  if (isNaN(position)) {
    console.error("передано не верное значение в countSectionPosition");
    return 0;
  }

  return position;
};

const chageMenuThemeForSection = (sectionEq) => {
  const currentSection = sections.eq(sectionEq);
  const menuTheme = currentSection.attr("data-sidemenu-theme");
  const activeClass = "fixed-menu--shadowed";

  if (menuTheme == "black") {
    sideMenu.addClass(activeClass);
  } else {
    sideMenu.removeClass(activeClass);
  }
};

const resetActiveClassForItem = (items, itemEq, activeClass) => {
  items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
};

const performTransition = (sectionEq) => {
  if(inScroll) return;

  const transitionOver = 1000;
  const mouseInertiaOver = 300;

  inScroll = true;

  const position = countSectionPosition(sectionEq);

  chageMenuThemeForSection(sectionEq);

  display.css({
    transform: `translateY(${position}%)`,
  });

  resetActiveClassForItem(sections, sectionEq, "active");

  setTimeout(() => {
    inScroll = false;
    resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");
  }, transitionOver + mouseInertiaOver);
};

const viewportScroller = () => {
  const activeSection = sections.filter(".active");
  const nextSection = activeSection.next();
  const prevSection = activeSection.prev();

  return {
    next() {
      if (nextSection.length) {
        performTransition(nextSection.index());
      }
    },
    prev() {
      if (prevSection.length) {
        performTransition(prevSection.index());
      }
    },
  };
};

$(window).on("wheel", (e) => {
  const deltaY = e.originalEvent.deltaY;
  const scroller = viewportScroller();

  if (deltaY > 0) {
    scroller.next();
  }
  
  if (deltaY < 0 ) {
    scroller.prev();
  }
 });

 $(window).on("keydown", (e) => {
  const tagName = e.target.tagName.toLowerCase();
  const userTypingInInputs = tagName == "input" || tagName == "textarea";
  const scroller = viewportScroller();

  if (userTypingInInputs) return;

  switch (e.keyCode) {
    case 38:
        scroller.prev();
      break;
      
    case 40:
        scroller.next();
        break;
    }
 });

 $(".wrapper").on("touchmove", (e) => e.preventDefault());

 $("[data-scroll-to]").click((e) => {
   e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-scroll-to");
  const reqSection = $(`[data-section-id=${target}]`);
  
  performTransition(reqSection.index());
 });

if (isMobile) {
  //  https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
  $("body").swipe({
    swipe: function (event, direction) {
      const scroller = viewportScroller();
      let scrollDirection = "";

      if (direction == "up") scrollDirection = "next";
      if (direction == "down") scrollDirection = "prev";

      scroller[scrollDirection]();
    },
  });
}
const slider = $('.sliders__list').bxSlider({
  pager: false,
  controls: false
});

$('.sliders__arrow--left').click(e => {
  e.preventDefault();
  slider.goToPrevSlide();
})
$('.sliders__arrow--right').click(e => {
  e.preventDefault();
  slider.goToNextSlide();
})
const findBlockByAlias = alias => {
  return $('.reviews__content').filter((ndx, item) => {
    return $(item).attr("data-linked-with") == alias
  });
};

$('.interactive-avatar__link').click(e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-open");
  const itemToShow = findBlockByAlias(target);
  const curItem = $this.closest(".interactive-avatar");

  itemToShow.addClass("active").siblings().removeClass("active");
  curItem.addClass("active").siblings().removeClass("active");
})
let video;
let durationControl;
let soundControl;
let intervalId;

document.addEventListener('DOMContentLoaded', e=>{
    video = document.getElementById('video');

    video.addEventListener('click', playStop);

    let playButtons = document.querySelectorAll('.play');
    for (let i = 0; i < playButtons.length; i++) {
        playButtons[i].addEventListener('click', playStop);
    }

    let micControl = document.getElementById('micLevel');
    micControl.addEventListener('click' , soundOf);

    durationControl = document.getElementById('durationLevel');
    durationControl.addEventListener('mousedown' , stopInterval);
    durationControl.addEventListener('click', setVideoDuration);

    durationControl.min = 0;
    durationControl.value = 0;

    soundControl = document.getElementById('volumeLevel');
    soundControl.addEventListener('click' , changeSoundVolume);
    soundControl.addEventListener('mouseup' , changeSoundVolume);

    soundControl.min = 0;
    soundControl.max = 10;

    soundControl.value = soundControl.max;

})

function playStop(){
    let playImg = document.querySelector('.video__play');
    playImg.classList.toggle('video__play--active');

    durationControl.max = video.duration;

    if(video.paused){
        video.play();
        intervalId = setInterval(updateDuration , 1000 /66);
    }else{ 
        video.pause();
        clearInterval(intervalId);
    }
}

function updateDuration(){
    durationControl.value = video.currentTime;
}

function stopInterval(){
    video.pause();
    clearInterval(intervalId);
}

function setVideoDuration(){
    if(video.paused){
        video.play();
    }else{
        video.pause();
    }

    video.currentTime = durationControl.value;
    intervalId = setInterval(updateDuration , 1000 /66);
}

function changeSoundVolume(){
    video.volume = soundControl.value/10;
}

function soundOf(){
    if(video.volume === 0){
        video.volume = soundLevel;
        soundControl.value = soundLevel * 10;
    }else{
        soundLevel = video.volume;
        video.volume = 0;
        soundControl.value = 0;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
