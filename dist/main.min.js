const mesureWidth = item => {
  let reqItemWidth = 0;

  const screenWidth = $(window).width();
  const container = item.closest(".recipes");
  const titlesBlocks = container.find(".recipes__title");
  const titlesWidth = titlesBlocks.width() * titlesBlocks.length;

  const textContainer = item.find(".recipes__container");
  const paddingLeft = parseInt(textContainer.css("padding-left"));
  const paddingRight = parseInt(textContainer.css("padding-right"));

  const isMobile = window.matchMedia("(max-width: 768px)").matches;

  if (isMobile) {
    reqItemWidth = screenWidth - titlesWidth;
  } else {
    reqItemWidth = 500;
  }

  return {
    container: reqItemWidth,
    textContainer: reqItemWidth - paddingLeft - paddingRight
  }
};

const closeEveryItemInContainer = (container) => {
  const items = container.find(".recipes__item");
  const content = container.find(".recipes__description");

  items.removeClass("active"); 
  content.width(0);
};

const openItemAccord = (item) => {
  const hiddenContent = item.find(".recipes__description");
  const reqWidth = mesureWidth(item);
  const textBlock = item.find(".recipes__container");

  item.addClass("active");
  hiddenContent.width(reqWidth.container);
  textBlock.width(reqWidth.textContainer);
};

$(".recipes__title").on("click", (e) => {
   e.preventDefault();

   const $this = $(e.currentTarget);
   const item = $this.closest(".recipes__item");
   const itemOpened = item.hasClass("active");
   const container = $this.closest(".recipes");

   if (itemOpened) {
    closeEveryItemInContainer(container)
  } else {
    closeEveryItemInContainer(container)
    openItemAccord(item);
   }

});

$(".recipes__close").on("click", e => {
  e.preventDefault();

  closeEveryItemInContainer($('.recipes'));
});
const openItem = item => {
  const container = item.closest(".team__member");
  const contentBlock = container.find(".member__content");
  const textBlock = contentBlock.find(".member__content-block");
  const reqHeight = textBlock.height();
  
  container.addClass("active")
  contentBlock.height(reqHeight);
}

const closeEveryItem = container => {
  const items = container.find('.member__content');
  const itemContainer = container.find(".team__member");

  itemContainer.removeClass("active");
  items.height(0);
}

$('.member__name').click(e => {
  const $this = $(e.currentTarget);
  const container = $this.closest('.team');
  const elemContainer = $this.closest(".team__member");

  if (elemContainer.hasClass("active")) {
    closeEveryItem(container);
  } else {
    closeEveryItem(container);
    openItem($this);
  }

})



// $(document).ready(() => {
//   $('.member__name').on('click', function(e) {
//     let member = $(e.currentTarget).next();
//     $(this).toggleClass('member__function--active');
//     member.slideToggle();
//   })
// });
let myMap;

const init = () => {
  myMap = new ymaps.Map("map", {
    center: [55.753969, 37.606673],
    zoom: 14,
    controls: []
  });

  const coords =  [
    [55.763183, 37.582547],
    [55.741035, 37.573998],
    [55.746456, 37.608084],
    [55.761756, 37.618330]
  ];

  const myCollection = new ymaps.GeoObjectCollection({}, {
    draggable: false,
    iconLayout: 'default#image',
    iconImageHref: "./img/icons/default/marker.svg",
    iconImageSize: [46, 57],
    iconImageOffset: [-35, -52]
  });

  coords.forEach(coord => {
    myCollection.add(new ymaps.Placemark(coord));
  });

  myMap.geoObjects.add(myCollection);

  myMap.behaviors.disable('scrollZoom');
}

ymaps.ready(init); 
const menu = document.querySelector(".menu");
const hamburger = document.querySelector(".hamburger");

hamburger.addEventListener("click", e => {
  e.preventDefault();

  menu.classList.add("menu--mobile");
  hamburger.classList.add("hamburger--close");

  hamburger.addEventListener("click", i => {
    menu.classList.toggle("menu--mobile");
    hamburger.classList.toggle("hamburger--close");
  })

})


// const menu = document.querySelector(".menu");
// const hamburger = document.querySelector(".hamburger");

// hamburger.addEventListener("click", e => {
//   e.preventDefault();
//   menu.classList.add("menu--mobile");

//   const closeElement = document.createElement("div");
//   closeElement.classList.add("close");
//   closeElement.innerHTML = "x";

//   closeElement.addEventListener("click", e => {
//     menu.classList.remove("menu--mobile");
//     menu.removeChild(closeElement);
//   })

//   menu.appendChild(closeElement);
// })
const validateFields = (form, fieldsArray) => {
  fieldsArray.forEach(field => {
    field.removeClass("input-eror");
    if (field.val().trim() === "") {
      field.addClass("input-eror"); 
    }
  });

  const errorFields = form.find(".input-eror");

  return errorFields.length === 0;
}

$('.form').submit(e => {
  e.preventDefault();

  const form = $(e.currentTarget);
  const name = form.find("[name='name']");
  const phone = form.find("[name='phone']");
  const comment = form.find("[name='comment']");
  const to = form.find("[name='to']");

  const modal = $("#modal");
  const content = modal.find(".modal__content");

  modal.removeClass("error-modal");

  const isValid = validateFields(form, [name, phone, comment, to]);

  if (isValid) {
    const request = $.ajax({
      url: "https://webdev-api.loftschool.com/sendmail",
      method: "post",
      data: {
      name: name.val(),
      phone: phone.val(),
      comment: comment.val(),
      to: to.val(),
      }
    });

    request.done(data => {
      content.text(data.message);
    });

    request.fail( data => {
      const message = data.responseJSON.message;
      content.text(message);
      modal.addClass("error-modal");
    });

    request.always(() => {
      $.fancybox.open({
        src  : '#modal',
        type : 'inline'
        });     
    })
  }
});

$('.app-close-modal').click(e => {
  e.preventDefault();

  $.fancybox.close();
})
const sections = $("section");
const display = $(".maincontent");
const sideMenu = $(".fixed-menu");
const menuItems = sideMenu.find(".fixed-menu__item");

const mobileDetect = new MobileDetect(window.navigator.userAgent);
const isMobile = mobileDetect.mobile();

let inScroll = false;

sections.first().addClass("active");

const countSectionPosition = (sectionEq) => {
  const position = sectionEq * -100;

  if (isNaN(position)) {
    console.error("передано не верное значение в countSectionPosition");
    return 0;
  }

  return position;
};

const chageMenuThemeForSection = (sectionEq) => {
  const currentSection = sections.eq(sectionEq);
  const menuTheme = currentSection.attr("data-sidemenu-theme");
  const activeClass = "fixed-menu--shadowed";

  if (menuTheme == "black") {
    sideMenu.addClass(activeClass);
  } else {
    sideMenu.removeClass(activeClass);
  }
};

const resetActiveClassForItem = (items, itemEq, activeClass) => {
  items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
};

const performTransition = (sectionEq) => {
  if(inScroll) return;

  const transitionOver = 1000;
  const mouseInertiaOver = 300;

  inScroll = true;

  const position = countSectionPosition(sectionEq);

  chageMenuThemeForSection(sectionEq);

  display.css({
    transform: `translateY(${position}%)`,
  });

  resetActiveClassForItem(sections, sectionEq, "active");

  setTimeout(() => {
    inScroll = false;
    resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");
  }, transitionOver + mouseInertiaOver);
};

const viewportScroller = () => {
  const activeSection = sections.filter(".active");
  const nextSection = activeSection.next();
  const prevSection = activeSection.prev();

  return {
    next() {
      if (nextSection.length) {
        performTransition(nextSection.index());
      }
    },
    prev() {
      if (prevSection.length) {
        performTransition(prevSection.index());
      }
    },
  };
};

$(window).on("wheel", (e) => {
  const deltaY = e.originalEvent.deltaY;
  const scroller = viewportScroller();

  if (deltaY > 0) {
    scroller.next();
  }
  
  if (deltaY < 0 ) {
    scroller.prev();
  }
 });

 $(window).on("keydown", (e) => {
  const tagName = e.target.tagName.toLowerCase();
  const userTypingInInputs = tagName == "input" || tagName == "textarea";
  const scroller = viewportScroller();

  if (userTypingInInputs) return;

  switch (e.keyCode) {
    case 38:
        scroller.prev();
      break;
      
    case 40:
        scroller.next();
        break;
    }
 });

 $(".wrapper").on("touchmove", (e) => e.preventDefault());

 $("[data-scroll-to]").click((e) => {
   e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-scroll-to");
  const reqSection = $(`[data-section-id=${target}]`);
  
  performTransition(reqSection.index());
 });

if (isMobile) {
  //  https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
  $("body").swipe({
    swipe: function (event, direction) {
      const scroller = viewportScroller();
      let scrollDirection = "";

      if (direction == "up") scrollDirection = "next";
      if (direction == "down") scrollDirection = "prev";

      scroller[scrollDirection]();
    },
  });
}
const slider = $('.sliders__list').bxSlider({
  pager: false,
  controls: false
});

$('.sliders__arrow--left').click(e => {
  e.preventDefault();
  slider.goToPrevSlide();
})
$('.sliders__arrow--right').click(e => {
  e.preventDefault();
  slider.goToNextSlide();
})
const findBlockByAlias = alias => {
  return $('.reviews__content').filter((ndx, item) => {
    return $(item).attr("data-linked-with") == alias
  });
};

$('.interactive-avatar__link').click(e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-open");
  const itemToShow = findBlockByAlias(target);
  const curItem = $this.closest(".interactive-avatar");

  itemToShow.addClass("active").siblings().removeClass("active");
  curItem.addClass("active").siblings().removeClass("active");
})
let video;
let durationControl;
let soundControl;
let intervalId;

document.addEventListener('DOMContentLoaded', e=>{
    video = document.getElementById('video');

    video.addEventListener('click', playStop);

    let playButtons = document.querySelectorAll('.play');
    for (let i = 0; i < playButtons.length; i++) {
        playButtons[i].addEventListener('click', playStop);
    }

    let micControl = document.getElementById('micLevel');
    micControl.addEventListener('click' , soundOf);

    durationControl = document.getElementById('durationLevel');
    durationControl.addEventListener('mousedown' , stopInterval);
    durationControl.addEventListener('click', setVideoDuration);

    durationControl.min = 0;
    durationControl.value = 0;

    soundControl = document.getElementById('volumeLevel');
    soundControl.addEventListener('click' , changeSoundVolume);
    soundControl.addEventListener('mouseup' , changeSoundVolume);

    soundControl.min = 0;
    soundControl.max = 10;

    soundControl.value = soundControl.max;

})

function playStop(){
    let playImg = document.querySelector('.video__play');
    playImg.classList.toggle('video__play--active');

    durationControl.max = video.duration;

    if(video.paused){
        video.play();
        intervalId = setInterval(updateDuration , 1000 /66);
    }else{ 
        video.pause();
        clearInterval(intervalId);
    }
}

function updateDuration(){
    durationControl.value = video.currentTime;
}

function stopInterval(){
    video.pause();
    clearInterval(intervalId);
}

function setVideoDuration(){
    if(video.paused){
        video.play();
    }else{
        video.pause();
    }

    video.currentTime = durationControl.value;
    intervalId = setInterval(updateDuration , 1000 /66);
}

function changeSoundVolume(){
    video.volume = soundControl.value/10;
}

function soundOf(){
    if(video.volume === 0){
        video.volume = soundLevel;
        soundControl.value = soundLevel * 10;
    }else{
        soundLevel = video.volume;
        video.volume = 0;
        soundControl.value = 0;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjY29yZC1tZW51LmpzIiwiYWNjb3JkaW9uLmpzIiwibWFwLmpzIiwibWVudS5qcyIsIm1vZGFsLmpzIiwib3BzLmpzIiwic2xpZGVyLmpzIiwidGFicy5qcyIsInZpZGVvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1lc3VyZVdpZHRoID0gaXRlbSA9PiB7XG4gIGxldCByZXFJdGVtV2lkdGggPSAwO1xuXG4gIGNvbnN0IHNjcmVlbldpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGl0ZW0uY2xvc2VzdChcIi5yZWNpcGVzXCIpO1xuICBjb25zdCB0aXRsZXNCbG9ja3MgPSBjb250YWluZXIuZmluZChcIi5yZWNpcGVzX190aXRsZVwiKTtcbiAgY29uc3QgdGl0bGVzV2lkdGggPSB0aXRsZXNCbG9ja3Mud2lkdGgoKSAqIHRpdGxlc0Jsb2Nrcy5sZW5ndGg7XG5cbiAgY29uc3QgdGV4dENvbnRhaW5lciA9IGl0ZW0uZmluZChcIi5yZWNpcGVzX19jb250YWluZXJcIik7XG4gIGNvbnN0IHBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQodGV4dENvbnRhaW5lci5jc3MoXCJwYWRkaW5nLWxlZnRcIikpO1xuICBjb25zdCBwYWRkaW5nUmlnaHQgPSBwYXJzZUludCh0ZXh0Q29udGFpbmVyLmNzcyhcInBhZGRpbmctcmlnaHRcIikpO1xuXG4gIGNvbnN0IGlzTW9iaWxlID0gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA3NjhweClcIikubWF0Y2hlcztcblxuICBpZiAoaXNNb2JpbGUpIHtcbiAgICByZXFJdGVtV2lkdGggPSBzY3JlZW5XaWR0aCAtIHRpdGxlc1dpZHRoO1xuICB9IGVsc2Uge1xuICAgIHJlcUl0ZW1XaWR0aCA9IDUwMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY29udGFpbmVyOiByZXFJdGVtV2lkdGgsXG4gICAgdGV4dENvbnRhaW5lcjogcmVxSXRlbVdpZHRoIC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHRcbiAgfVxufTtcblxuY29uc3QgY2xvc2VFdmVyeUl0ZW1JbkNvbnRhaW5lciA9IChjb250YWluZXIpID0+IHtcbiAgY29uc3QgaXRlbXMgPSBjb250YWluZXIuZmluZChcIi5yZWNpcGVzX19pdGVtXCIpO1xuICBjb25zdCBjb250ZW50ID0gY29udGFpbmVyLmZpbmQoXCIucmVjaXBlc19fZGVzY3JpcHRpb25cIik7XG5cbiAgaXRlbXMucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7IFxuICBjb250ZW50LndpZHRoKDApO1xufTtcblxuY29uc3Qgb3Blbkl0ZW1BY2NvcmQgPSAoaXRlbSkgPT4ge1xuICBjb25zdCBoaWRkZW5Db250ZW50ID0gaXRlbS5maW5kKFwiLnJlY2lwZXNfX2Rlc2NyaXB0aW9uXCIpO1xuICBjb25zdCByZXFXaWR0aCA9IG1lc3VyZVdpZHRoKGl0ZW0pO1xuICBjb25zdCB0ZXh0QmxvY2sgPSBpdGVtLmZpbmQoXCIucmVjaXBlc19fY29udGFpbmVyXCIpO1xuXG4gIGl0ZW0uYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gIGhpZGRlbkNvbnRlbnQud2lkdGgocmVxV2lkdGguY29udGFpbmVyKTtcbiAgdGV4dEJsb2NrLndpZHRoKHJlcVdpZHRoLnRleHRDb250YWluZXIpO1xufTtcblxuJChcIi5yZWNpcGVzX190aXRsZVwiKS5vbihcImNsaWNrXCIsIChlKSA9PiB7XG4gICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgIGNvbnN0ICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgY29uc3QgaXRlbSA9ICR0aGlzLmNsb3Nlc3QoXCIucmVjaXBlc19faXRlbVwiKTtcbiAgIGNvbnN0IGl0ZW1PcGVuZWQgPSBpdGVtLmhhc0NsYXNzKFwiYWN0aXZlXCIpO1xuICAgY29uc3QgY29udGFpbmVyID0gJHRoaXMuY2xvc2VzdChcIi5yZWNpcGVzXCIpO1xuXG4gICBpZiAoaXRlbU9wZW5lZCkge1xuICAgIGNsb3NlRXZlcnlJdGVtSW5Db250YWluZXIoY29udGFpbmVyKVxuICB9IGVsc2Uge1xuICAgIGNsb3NlRXZlcnlJdGVtSW5Db250YWluZXIoY29udGFpbmVyKVxuICAgIG9wZW5JdGVtQWNjb3JkKGl0ZW0pO1xuICAgfVxuXG59KTtcblxuJChcIi5yZWNpcGVzX19jbG9zZVwiKS5vbihcImNsaWNrXCIsIGUgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgY2xvc2VFdmVyeUl0ZW1JbkNvbnRhaW5lcigkKCcucmVjaXBlcycpKTtcbn0pOyIsImNvbnN0IG9wZW5JdGVtID0gaXRlbSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGl0ZW0uY2xvc2VzdChcIi50ZWFtX19tZW1iZXJcIik7XG4gIGNvbnN0IGNvbnRlbnRCbG9jayA9IGNvbnRhaW5lci5maW5kKFwiLm1lbWJlcl9fY29udGVudFwiKTtcbiAgY29uc3QgdGV4dEJsb2NrID0gY29udGVudEJsb2NrLmZpbmQoXCIubWVtYmVyX19jb250ZW50LWJsb2NrXCIpO1xuICBjb25zdCByZXFIZWlnaHQgPSB0ZXh0QmxvY2suaGVpZ2h0KCk7XG4gIFxuICBjb250YWluZXIuYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgY29udGVudEJsb2NrLmhlaWdodChyZXFIZWlnaHQpO1xufVxuXG5jb25zdCBjbG9zZUV2ZXJ5SXRlbSA9IGNvbnRhaW5lciA9PiB7XG4gIGNvbnN0IGl0ZW1zID0gY29udGFpbmVyLmZpbmQoJy5tZW1iZXJfX2NvbnRlbnQnKTtcbiAgY29uc3QgaXRlbUNvbnRhaW5lciA9IGNvbnRhaW5lci5maW5kKFwiLnRlYW1fX21lbWJlclwiKTtcblxuICBpdGVtQ29udGFpbmVyLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICBpdGVtcy5oZWlnaHQoMCk7XG59XG5cbiQoJy5tZW1iZXJfX25hbWUnKS5jbGljayhlID0+IHtcbiAgY29uc3QgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gIGNvbnN0IGNvbnRhaW5lciA9ICR0aGlzLmNsb3Nlc3QoJy50ZWFtJyk7XG4gIGNvbnN0IGVsZW1Db250YWluZXIgPSAkdGhpcy5jbG9zZXN0KFwiLnRlYW1fX21lbWJlclwiKTtcblxuICBpZiAoZWxlbUNvbnRhaW5lci5oYXNDbGFzcyhcImFjdGl2ZVwiKSkge1xuICAgIGNsb3NlRXZlcnlJdGVtKGNvbnRhaW5lcik7XG4gIH0gZWxzZSB7XG4gICAgY2xvc2VFdmVyeUl0ZW0oY29udGFpbmVyKTtcbiAgICBvcGVuSXRlbSgkdGhpcyk7XG4gIH1cblxufSlcblxuXG5cbi8vICQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbi8vICAgJCgnLm1lbWJlcl9fbmFtZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbi8vICAgICBsZXQgbWVtYmVyID0gJChlLmN1cnJlbnRUYXJnZXQpLm5leHQoKTtcbi8vICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdtZW1iZXJfX2Z1bmN0aW9uLS1hY3RpdmUnKTtcbi8vICAgICBtZW1iZXIuc2xpZGVUb2dnbGUoKTtcbi8vICAgfSlcbi8vIH0pOyIsImxldCBteU1hcDtcblxuY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgbXlNYXAgPSBuZXcgeW1hcHMuTWFwKFwibWFwXCIsIHtcbiAgICBjZW50ZXI6IFs1NS43NTM5NjksIDM3LjYwNjY3M10sXG4gICAgem9vbTogMTQsXG4gICAgY29udHJvbHM6IFtdXG4gIH0pO1xuXG4gIGNvbnN0IGNvb3JkcyA9ICBbXG4gICAgWzU1Ljc2MzE4MywgMzcuNTgyNTQ3XSxcbiAgICBbNTUuNzQxMDM1LCAzNy41NzM5OThdLFxuICAgIFs1NS43NDY0NTYsIDM3LjYwODA4NF0sXG4gICAgWzU1Ljc2MTc1NiwgMzcuNjE4MzMwXVxuICBdO1xuXG4gIGNvbnN0IG15Q29sbGVjdGlvbiA9IG5ldyB5bWFwcy5HZW9PYmplY3RDb2xsZWN0aW9uKHt9LCB7XG4gICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICBpY29uTGF5b3V0OiAnZGVmYXVsdCNpbWFnZScsXG4gICAgaWNvbkltYWdlSHJlZjogXCIuL2ltZy9pY29ucy9kZWZhdWx0L21hcmtlci5zdmdcIixcbiAgICBpY29uSW1hZ2VTaXplOiBbNDYsIDU3XSxcbiAgICBpY29uSW1hZ2VPZmZzZXQ6IFstMzUsIC01Ml1cbiAgfSk7XG5cbiAgY29vcmRzLmZvckVhY2goY29vcmQgPT4ge1xuICAgIG15Q29sbGVjdGlvbi5hZGQobmV3IHltYXBzLlBsYWNlbWFyayhjb29yZCkpO1xuICB9KTtcblxuICBteU1hcC5nZW9PYmplY3RzLmFkZChteUNvbGxlY3Rpb24pO1xuXG4gIG15TWFwLmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJyk7XG59XG5cbnltYXBzLnJlYWR5KGluaXQpOyAiLCJjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51XCIpO1xuY29uc3QgaGFtYnVyZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oYW1idXJnZXJcIik7XG5cbmhhbWJ1cmdlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcblxuICBtZW51LmNsYXNzTGlzdC5hZGQoXCJtZW51LS1tb2JpbGVcIik7XG4gIGhhbWJ1cmdlci5jbGFzc0xpc3QuYWRkKFwiaGFtYnVyZ2VyLS1jbG9zZVwiKTtcblxuICBoYW1idXJnZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGkgPT4ge1xuICAgIG1lbnUuY2xhc3NMaXN0LnRvZ2dsZShcIm1lbnUtLW1vYmlsZVwiKTtcbiAgICBoYW1idXJnZXIuY2xhc3NMaXN0LnRvZ2dsZShcImhhbWJ1cmdlci0tY2xvc2VcIik7XG4gIH0pXG5cbn0pXG5cblxuLy8gY29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudVwiKTtcbi8vIGNvbnN0IGhhbWJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGFtYnVyZ2VyXCIpO1xuXG4vLyBoYW1idXJnZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4ge1xuLy8gICBlLnByZXZlbnREZWZhdWx0KCk7XG4vLyAgIG1lbnUuY2xhc3NMaXN0LmFkZChcIm1lbnUtLW1vYmlsZVwiKTtcblxuLy8gICBjb25zdCBjbG9zZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuLy8gICBjbG9zZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNsb3NlXCIpO1xuLy8gICBjbG9zZUVsZW1lbnQuaW5uZXJIVE1MID0gXCJ4XCI7XG5cbi8vICAgY2xvc2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHtcbi8vICAgICBtZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJtZW51LS1tb2JpbGVcIik7XG4vLyAgICAgbWVudS5yZW1vdmVDaGlsZChjbG9zZUVsZW1lbnQpO1xuLy8gICB9KVxuXG4vLyAgIG1lbnUuYXBwZW5kQ2hpbGQoY2xvc2VFbGVtZW50KTtcbi8vIH0pIiwiY29uc3QgdmFsaWRhdGVGaWVsZHMgPSAoZm9ybSwgZmllbGRzQXJyYXkpID0+IHtcbiAgZmllbGRzQXJyYXkuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgZmllbGQucmVtb3ZlQ2xhc3MoXCJpbnB1dC1lcm9yXCIpO1xuICAgIGlmIChmaWVsZC52YWwoKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgIGZpZWxkLmFkZENsYXNzKFwiaW5wdXQtZXJvclwiKTsgXG4gICAgfVxuICB9KTtcblxuICBjb25zdCBlcnJvckZpZWxkcyA9IGZvcm0uZmluZChcIi5pbnB1dC1lcm9yXCIpO1xuXG4gIHJldHVybiBlcnJvckZpZWxkcy5sZW5ndGggPT09IDA7XG59XG5cbiQoJy5mb3JtJykuc3VibWl0KGUgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgY29uc3QgZm9ybSA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcbiAgY29uc3QgbmFtZSA9IGZvcm0uZmluZChcIltuYW1lPSduYW1lJ11cIik7XG4gIGNvbnN0IHBob25lID0gZm9ybS5maW5kKFwiW25hbWU9J3Bob25lJ11cIik7XG4gIGNvbnN0IGNvbW1lbnQgPSBmb3JtLmZpbmQoXCJbbmFtZT0nY29tbWVudCddXCIpO1xuICBjb25zdCB0byA9IGZvcm0uZmluZChcIltuYW1lPSd0byddXCIpO1xuXG4gIGNvbnN0IG1vZGFsID0gJChcIiNtb2RhbFwiKTtcbiAgY29uc3QgY29udGVudCA9IG1vZGFsLmZpbmQoXCIubW9kYWxfX2NvbnRlbnRcIik7XG5cbiAgbW9kYWwucmVtb3ZlQ2xhc3MoXCJlcnJvci1tb2RhbFwiKTtcblxuICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVGaWVsZHMoZm9ybSwgW25hbWUsIHBob25lLCBjb21tZW50LCB0b10pO1xuXG4gIGlmIChpc1ZhbGlkKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9ICQuYWpheCh7XG4gICAgICB1cmw6IFwiaHR0cHM6Ly93ZWJkZXYtYXBpLmxvZnRzY2hvb2wuY29tL3NlbmRtYWlsXCIsXG4gICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgZGF0YToge1xuICAgICAgbmFtZTogbmFtZS52YWwoKSxcbiAgICAgIHBob25lOiBwaG9uZS52YWwoKSxcbiAgICAgIGNvbW1lbnQ6IGNvbW1lbnQudmFsKCksXG4gICAgICB0bzogdG8udmFsKCksXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXF1ZXN0LmRvbmUoZGF0YSA9PiB7XG4gICAgICBjb250ZW50LnRleHQoZGF0YS5tZXNzYWdlKTtcbiAgICB9KTtcblxuICAgIHJlcXVlc3QuZmFpbCggZGF0YSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gZGF0YS5yZXNwb25zZUpTT04ubWVzc2FnZTtcbiAgICAgIGNvbnRlbnQudGV4dChtZXNzYWdlKTtcbiAgICAgIG1vZGFsLmFkZENsYXNzKFwiZXJyb3ItbW9kYWxcIik7XG4gICAgfSk7XG5cbiAgICByZXF1ZXN0LmFsd2F5cygoKSA9PiB7XG4gICAgICAkLmZhbmN5Ym94Lm9wZW4oe1xuICAgICAgICBzcmMgIDogJyNtb2RhbCcsXG4gICAgICAgIHR5cGUgOiAnaW5saW5lJ1xuICAgICAgICB9KTsgICAgIFxuICAgIH0pXG4gIH1cbn0pO1xuXG4kKCcuYXBwLWNsb3NlLW1vZGFsJykuY2xpY2soZSA9PiB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcblxuICAkLmZhbmN5Ym94LmNsb3NlKCk7XG59KSIsImNvbnN0IHNlY3Rpb25zID0gJChcInNlY3Rpb25cIik7XG5jb25zdCBkaXNwbGF5ID0gJChcIi5tYWluY29udGVudFwiKTtcbmNvbnN0IHNpZGVNZW51ID0gJChcIi5maXhlZC1tZW51XCIpO1xuY29uc3QgbWVudUl0ZW1zID0gc2lkZU1lbnUuZmluZChcIi5maXhlZC1tZW51X19pdGVtXCIpO1xuXG5jb25zdCBtb2JpbGVEZXRlY3QgPSBuZXcgTW9iaWxlRGV0ZWN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IGlzTW9iaWxlID0gbW9iaWxlRGV0ZWN0Lm1vYmlsZSgpO1xuXG5sZXQgaW5TY3JvbGwgPSBmYWxzZTtcblxuc2VjdGlvbnMuZmlyc3QoKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblxuY29uc3QgY291bnRTZWN0aW9uUG9zaXRpb24gPSAoc2VjdGlvbkVxKSA9PiB7XG4gIGNvbnN0IHBvc2l0aW9uID0gc2VjdGlvbkVxICogLTEwMDtcblxuICBpZiAoaXNOYU4ocG9zaXRpb24pKSB7XG4gICAgY29uc29sZS5lcnJvcihcItC/0LXRgNC10LTQsNC90L4g0L3QtSDQstC10YDQvdC+0LUg0LfQvdCw0YfQtdC90LjQtSDQsiBjb3VudFNlY3Rpb25Qb3NpdGlvblwiKTtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbjtcbn07XG5cbmNvbnN0IGNoYWdlTWVudVRoZW1lRm9yU2VjdGlvbiA9IChzZWN0aW9uRXEpID0+IHtcbiAgY29uc3QgY3VycmVudFNlY3Rpb24gPSBzZWN0aW9ucy5lcShzZWN0aW9uRXEpO1xuICBjb25zdCBtZW51VGhlbWUgPSBjdXJyZW50U2VjdGlvbi5hdHRyKFwiZGF0YS1zaWRlbWVudS10aGVtZVwiKTtcbiAgY29uc3QgYWN0aXZlQ2xhc3MgPSBcImZpeGVkLW1lbnUtLXNoYWRvd2VkXCI7XG5cbiAgaWYgKG1lbnVUaGVtZSA9PSBcImJsYWNrXCIpIHtcbiAgICBzaWRlTWVudS5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG4gIH0gZWxzZSB7XG4gICAgc2lkZU1lbnUucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICB9XG59O1xuXG5jb25zdCByZXNldEFjdGl2ZUNsYXNzRm9ySXRlbSA9IChpdGVtcywgaXRlbUVxLCBhY3RpdmVDbGFzcykgPT4ge1xuICBpdGVtcy5lcShpdGVtRXEpLmFkZENsYXNzKGFjdGl2ZUNsYXNzKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzKTtcbn07XG5cbmNvbnN0IHBlcmZvcm1UcmFuc2l0aW9uID0gKHNlY3Rpb25FcSkgPT4ge1xuICBpZihpblNjcm9sbCkgcmV0dXJuO1xuXG4gIGNvbnN0IHRyYW5zaXRpb25PdmVyID0gMTAwMDtcbiAgY29uc3QgbW91c2VJbmVydGlhT3ZlciA9IDMwMDtcblxuICBpblNjcm9sbCA9IHRydWU7XG5cbiAgY29uc3QgcG9zaXRpb24gPSBjb3VudFNlY3Rpb25Qb3NpdGlvbihzZWN0aW9uRXEpO1xuXG4gIGNoYWdlTWVudVRoZW1lRm9yU2VjdGlvbihzZWN0aW9uRXEpO1xuXG4gIGRpc3BsYXkuY3NzKHtcbiAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVZKCR7cG9zaXRpb259JSlgLFxuICB9KTtcblxuICByZXNldEFjdGl2ZUNsYXNzRm9ySXRlbShzZWN0aW9ucywgc2VjdGlvbkVxLCBcImFjdGl2ZVwiKTtcblxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpblNjcm9sbCA9IGZhbHNlO1xuICAgIHJlc2V0QWN0aXZlQ2xhc3NGb3JJdGVtKG1lbnVJdGVtcywgc2VjdGlvbkVxLCBcImZpeGVkLW1lbnVfX2l0ZW0tLWFjdGl2ZVwiKTtcbiAgfSwgdHJhbnNpdGlvbk92ZXIgKyBtb3VzZUluZXJ0aWFPdmVyKTtcbn07XG5cbmNvbnN0IHZpZXdwb3J0U2Nyb2xsZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGFjdGl2ZVNlY3Rpb24gPSBzZWN0aW9ucy5maWx0ZXIoXCIuYWN0aXZlXCIpO1xuICBjb25zdCBuZXh0U2VjdGlvbiA9IGFjdGl2ZVNlY3Rpb24ubmV4dCgpO1xuICBjb25zdCBwcmV2U2VjdGlvbiA9IGFjdGl2ZVNlY3Rpb24ucHJldigpO1xuXG4gIHJldHVybiB7XG4gICAgbmV4dCgpIHtcbiAgICAgIGlmIChuZXh0U2VjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgcGVyZm9ybVRyYW5zaXRpb24obmV4dFNlY3Rpb24uaW5kZXgoKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmV2KCkge1xuICAgICAgaWYgKHByZXZTZWN0aW9uLmxlbmd0aCkge1xuICAgICAgICBwZXJmb3JtVHJhbnNpdGlvbihwcmV2U2VjdGlvbi5pbmRleCgpKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufTtcblxuJCh3aW5kb3cpLm9uKFwid2hlZWxcIiwgKGUpID0+IHtcbiAgY29uc3QgZGVsdGFZID0gZS5vcmlnaW5hbEV2ZW50LmRlbHRhWTtcbiAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XG5cbiAgaWYgKGRlbHRhWSA+IDApIHtcbiAgICBzY3JvbGxlci5uZXh0KCk7XG4gIH1cbiAgXG4gIGlmIChkZWx0YVkgPCAwICkge1xuICAgIHNjcm9sbGVyLnByZXYoKTtcbiAgfVxuIH0pO1xuXG4gJCh3aW5kb3cpLm9uKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICBjb25zdCB0YWdOYW1lID0gZS50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCB1c2VyVHlwaW5nSW5JbnB1dHMgPSB0YWdOYW1lID09IFwiaW5wdXRcIiB8fCB0YWdOYW1lID09IFwidGV4dGFyZWFcIjtcbiAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XG5cbiAgaWYgKHVzZXJUeXBpbmdJbklucHV0cykgcmV0dXJuO1xuXG4gIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgY2FzZSAzODpcbiAgICAgICAgc2Nyb2xsZXIucHJldigpO1xuICAgICAgYnJlYWs7XG4gICAgICBcbiAgICBjYXNlIDQwOlxuICAgICAgICBzY3JvbGxlci5uZXh0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiB9KTtcblxuICQoXCIud3JhcHBlclwiKS5vbihcInRvdWNobW92ZVwiLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcblxuICQoXCJbZGF0YS1zY3JvbGwtdG9dXCIpLmNsaWNrKChlKSA9PiB7XG4gICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgY29uc3QgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gIGNvbnN0IHRhcmdldCA9ICR0aGlzLmF0dHIoXCJkYXRhLXNjcm9sbC10b1wiKTtcbiAgY29uc3QgcmVxU2VjdGlvbiA9ICQoYFtkYXRhLXNlY3Rpb24taWQ9JHt0YXJnZXR9XWApO1xuICBcbiAgcGVyZm9ybVRyYW5zaXRpb24ocmVxU2VjdGlvbi5pbmRleCgpKTtcbiB9KTtcblxuaWYgKGlzTW9iaWxlKSB7XG4gIC8vICBodHRwczovL2dpdGh1Yi5jb20vbWF0dGJyeXNvbi9Ub3VjaFN3aXBlLUpxdWVyeS1QbHVnaW5cbiAgJChcImJvZHlcIikuc3dpcGUoe1xuICAgIHN3aXBlOiBmdW5jdGlvbiAoZXZlbnQsIGRpcmVjdGlvbikge1xuICAgICAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XG4gICAgICBsZXQgc2Nyb2xsRGlyZWN0aW9uID0gXCJcIjtcblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PSBcInVwXCIpIHNjcm9sbERpcmVjdGlvbiA9IFwibmV4dFwiO1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PSBcImRvd25cIikgc2Nyb2xsRGlyZWN0aW9uID0gXCJwcmV2XCI7XG5cbiAgICAgIHNjcm9sbGVyW3Njcm9sbERpcmVjdGlvbl0oKTtcbiAgICB9LFxuICB9KTtcbn0iLCJjb25zdCBzbGlkZXIgPSAkKCcuc2xpZGVyc19fbGlzdCcpLmJ4U2xpZGVyKHtcbiAgcGFnZXI6IGZhbHNlLFxuICBjb250cm9sczogZmFsc2Vcbn0pO1xuXG4kKCcuc2xpZGVyc19fYXJyb3ctLWxlZnQnKS5jbGljayhlID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBzbGlkZXIuZ29Ub1ByZXZTbGlkZSgpO1xufSlcbiQoJy5zbGlkZXJzX19hcnJvdy0tcmlnaHQnKS5jbGljayhlID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBzbGlkZXIuZ29Ub05leHRTbGlkZSgpO1xufSkiLCJjb25zdCBmaW5kQmxvY2tCeUFsaWFzID0gYWxpYXMgPT4ge1xuICByZXR1cm4gJCgnLnJldmlld3NfX2NvbnRlbnQnKS5maWx0ZXIoKG5keCwgaXRlbSkgPT4ge1xuICAgIHJldHVybiAkKGl0ZW0pLmF0dHIoXCJkYXRhLWxpbmtlZC13aXRoXCIpID09IGFsaWFzXG4gIH0pO1xufTtcblxuJCgnLmludGVyYWN0aXZlLWF2YXRhcl9fbGluaycpLmNsaWNrKGUgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgY29uc3QgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gIGNvbnN0IHRhcmdldCA9ICR0aGlzLmF0dHIoXCJkYXRhLW9wZW5cIik7XG4gIGNvbnN0IGl0ZW1Ub1Nob3cgPSBmaW5kQmxvY2tCeUFsaWFzKHRhcmdldCk7XG4gIGNvbnN0IGN1ckl0ZW0gPSAkdGhpcy5jbG9zZXN0KFwiLmludGVyYWN0aXZlLWF2YXRhclwiKTtcblxuICBpdGVtVG9TaG93LmFkZENsYXNzKFwiYWN0aXZlXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gIGN1ckl0ZW0uYWRkQ2xhc3MoXCJhY3RpdmVcIikuc2libGluZ3MoKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbn0pIiwibGV0IHZpZGVvO1xubGV0IGR1cmF0aW9uQ29udHJvbDtcbmxldCBzb3VuZENvbnRyb2w7XG5sZXQgaW50ZXJ2YWxJZDtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGU9PntcbiAgICB2aWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWRlbycpO1xuXG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGF5U3RvcCk7XG5cbiAgICBsZXQgcGxheUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxheScpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxheUJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGxheUJ1dHRvbnNbaV0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGF5U3RvcCk7XG4gICAgfVxuXG4gICAgbGV0IG1pY0NvbnRyb2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWljTGV2ZWwnKTtcbiAgICBtaWNDb250cm9sLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyAsIHNvdW5kT2YpO1xuXG4gICAgZHVyYXRpb25Db250cm9sID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R1cmF0aW9uTGV2ZWwnKTtcbiAgICBkdXJhdGlvbkNvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJyAsIHN0b3BJbnRlcnZhbCk7XG4gICAgZHVyYXRpb25Db250cm9sLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0VmlkZW9EdXJhdGlvbik7XG5cbiAgICBkdXJhdGlvbkNvbnRyb2wubWluID0gMDtcbiAgICBkdXJhdGlvbkNvbnRyb2wudmFsdWUgPSAwO1xuXG4gICAgc291bmRDb250cm9sID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZvbHVtZUxldmVsJyk7XG4gICAgc291bmRDb250cm9sLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyAsIGNoYW5nZVNvdW5kVm9sdW1lKTtcbiAgICBzb3VuZENvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcgLCBjaGFuZ2VTb3VuZFZvbHVtZSk7XG5cbiAgICBzb3VuZENvbnRyb2wubWluID0gMDtcbiAgICBzb3VuZENvbnRyb2wubWF4ID0gMTA7XG5cbiAgICBzb3VuZENvbnRyb2wudmFsdWUgPSBzb3VuZENvbnRyb2wubWF4O1xuXG59KVxuXG5mdW5jdGlvbiBwbGF5U3RvcCgpe1xuICAgIGxldCBwbGF5SW1nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZGVvX19wbGF5Jyk7XG4gICAgcGxheUltZy5jbGFzc0xpc3QudG9nZ2xlKCd2aWRlb19fcGxheS0tYWN0aXZlJyk7XG5cbiAgICBkdXJhdGlvbkNvbnRyb2wubWF4ID0gdmlkZW8uZHVyYXRpb247XG5cbiAgICBpZih2aWRlby5wYXVzZWQpe1xuICAgICAgICB2aWRlby5wbGF5KCk7XG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh1cGRhdGVEdXJhdGlvbiAsIDEwMDAgLzY2KTtcbiAgICB9ZWxzZXsgXG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVEdXJhdGlvbigpe1xuICAgIGR1cmF0aW9uQ29udHJvbC52YWx1ZSA9IHZpZGVvLmN1cnJlbnRUaW1lO1xufVxuXG5mdW5jdGlvbiBzdG9wSW50ZXJ2YWwoKXtcbiAgICB2aWRlby5wYXVzZSgpO1xuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG59XG5cbmZ1bmN0aW9uIHNldFZpZGVvRHVyYXRpb24oKXtcbiAgICBpZih2aWRlby5wYXVzZWQpe1xuICAgICAgICB2aWRlby5wbGF5KCk7XG4gICAgfWVsc2V7XG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgdmlkZW8uY3VycmVudFRpbWUgPSBkdXJhdGlvbkNvbnRyb2wudmFsdWU7XG4gICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKHVwZGF0ZUR1cmF0aW9uICwgMTAwMCAvNjYpO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VTb3VuZFZvbHVtZSgpe1xuICAgIHZpZGVvLnZvbHVtZSA9IHNvdW5kQ29udHJvbC52YWx1ZS8xMDtcbn1cblxuZnVuY3Rpb24gc291bmRPZigpe1xuICAgIGlmKHZpZGVvLnZvbHVtZSA9PT0gMCl7XG4gICAgICAgIHZpZGVvLnZvbHVtZSA9IHNvdW5kTGV2ZWw7XG4gICAgICAgIHNvdW5kQ29udHJvbC52YWx1ZSA9IHNvdW5kTGV2ZWwgKiAxMDtcbiAgICB9ZWxzZXtcbiAgICAgICAgc291bmRMZXZlbCA9IHZpZGVvLnZvbHVtZTtcbiAgICAgICAgdmlkZW8udm9sdW1lID0gMDtcbiAgICAgICAgc291bmRDb250cm9sLnZhbHVlID0gMDtcbiAgICB9XG59XG4iXX0=
